"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[371],{8731:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>a,toc:()=>c});var n=t(5893),r=t(1151);const i={sidebar_position:2},o="Symmetry-based Clustering (SBC)",a={id:"symmetry-based-clustering",title:"Symmetry-based Clustering (SBC)",description:"There are several tools for building atomistic systems from components, but the",source:"@site/docs/symmetry-based-clustering.md",sourceDirName:".",slug:"/symmetry-based-clustering",permalink:"/matid/docs/symmetry-based-clustering",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/symmetry-based-clustering.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Installation",permalink:"/matid/docs/installation/"},next:{title:"Dimensionality Analysis",permalink:"/matid/docs/dimensionality"}},l={},c=[];function d(e){const s={code:"code",h1:"h1",p:"p",pre:"pre",...(0,r.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.h1,{id:"symmetry-based-clustering-sbc",children:"Symmetry-based Clustering (SBC)"}),"\n",(0,n.jsx)(s.p,{children:"There are several tools for building atomistic systems from components, but the\nreverse process of identifying these components from an existing system is much\nharder. MatID utilizes a custom clustering algorithm, called Symmetry-based\nClustering (SBC), which can cluster atoms based on local translational symmetry."}),"\n",(0,n.jsxs)(s.p,{children:["Clustering is performed using the ",(0,n.jsx)(s.code,{children:"SBC"})," class. The basic syntax is relatively\nsimple: you have to initialize the SBC class with parameters that are suitable\nfor your use case (sensible defaults are provided), and then call the\n",(0,n.jsx)(s.code,{children:"get_clusters()"}),"-method. The following demonstrates this on a existing structure\nfile:"]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-python",children:"from ase.io import read\nfrom matid.clustering import Clusterer\n\nsystem = ase.io.read('system.xyz')\n\nsbc = SBC()\nclusters = SBC.get_clusters(system)\n"})}),"\n",(0,n.jsxs)(s.p,{children:["The return value is a list of the found ",(0,n.jsx)(s.code,{children:"Cluster"})," instances. You can perform\nfurther analysis on these found clusters by using methods and attributes of this\nclass. E.g. to visualize all of the found clusters, we could do the following:"]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-python",children:"for cluster in clusters:\n\n"})}),"\n",(0,n.jsx)(s.p,{children:"The resulting image is as follows:"})]})}function u(e={}){const{wrapper:s}={...(0,r.a)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},1151:(e,s,t)=>{t.d(s,{Z:()=>a,a:()=>o});var n=t(7294);const r={},i=n.createContext(r);function o(e){const s=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),n.createElement(i.Provider,{value:s},e.children)}}}]);