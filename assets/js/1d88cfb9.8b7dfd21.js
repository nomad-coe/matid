"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[723],{2114:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>a});var t=s(5893),i=s(1151);const r={sidebar_position:2,sidebar_label:"Cluster Class"},o="Cluster Class",l={id:"reference/cluster",title:"Cluster Class",description:"Contains information about a cluster, i.e. a part of some bigger original",source:"@site/docs/reference/cluster.md",sourceDirName:"reference",slug:"/reference/cluster",permalink:"/matid/docs/reference/cluster",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,sidebar_label:"Cluster Class"},sidebar:"docsSidebar",previous:{title:"SBC Class",permalink:"/matid/docs/reference/sbc"},next:{title:"SymmetryAnalyzer Class",permalink:"/matid/docs/reference/symmetryanalyzer"}},c={},a=[{value:"__init__",id:"__init__",level:2},{value:"get_cell",id:"get_cell",level:2},{value:"get_atoms",id:"get_atoms",level:2},{value:"get_dimensionality",id:"get_dimensionality",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"cluster-class",children:"Cluster Class"}),"\n",(0,t.jsx)(n.p,{children:"Contains information about a cluster, i.e. a part of some bigger original\natomistic system."}),"\n",(0,t.jsx)(n.p,{children:"This class is a simple data container where every attribute should be set\nonly once, but does not have to be set in one go and can be insted built\ngradually."}),"\n",(0,t.jsx)(n.h2,{id:"__init__",children:"__init__"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"def __init__(indices=None,\n             species=None,\n             region=None,\n             dimensionality=None,\n             cell=None,\n             system=None,\n             distances=None,\n             radii=None,\n             bond_threshold=None)\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"indices(Iterable)"})," - Contains the indices of atoms belonging to this\ncluster."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"species(set)"})," - Contains the species of atoms belonging to this\ncluster. Each unique species should be include only once."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"region(Region)"})," - The Region instance from which this cluster was\nexracted from."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"dimensionality(int)"})," - The dimensionality of the cluster. Can be set\ninitially here or calculated through the get_dimensionality-function."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"cell(ase.Atoms)"})," - The unit cell from which this cluster is\nconstructed from."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"system(ase.Atoms)"})," - Reference to the original system which this\ncluster is a part of."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"distances(Distances)"})," - Contains cached distance information about\nthis cluster."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"radii(ndarray)"})," - Contains the radii for each atom in the cluster as\nfloating point numbers."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"get_cell",children:"get_cell"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"def get_cell() -> Atoms\n"})}),"\n",(0,t.jsx)(n.p,{children:"Used to fetch the prototypical cell for this cluster if one exists."}),"\n",(0,t.jsx)(n.h2,{id:"get_atoms",children:"get_atoms"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"def get_atoms() -> Atoms\n"})}),"\n",(0,t.jsx)(n.p,{children:"Returns the ase.Atoms object for this cluster."}),"\n",(0,t.jsx)(n.h2,{id:"get_dimensionality",children:"get_dimensionality"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"def get_dimensionality() -> int\n"})}),"\n",(0,t.jsx)(n.p,{children:"Shortcut for fetching the dimensionality of the cluster using\nmatid.geometry.get_dimensionality and the radii + bond thresholds that\nwere used during the clustering."})]})}function h(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},1151:(e,n,s)=>{s.d(n,{Z:()=>l,a:()=>o});var t=s(7294);const i={},r=t.createContext(i);function o(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);